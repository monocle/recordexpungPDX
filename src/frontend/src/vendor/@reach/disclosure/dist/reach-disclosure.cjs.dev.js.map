{"version":3,"sources":["../src/reach-disclosure.tsx"],"sourcesContent":["/**\n * Welcome to @reach/disclosure!\n *\n * A disclosure is a button that controls visibility of a panel of content. When\n * the content inside the panel is hidden, it is often styled as a typical push\n * button with a right-pointing arrow or triangle to hint that activating the\n * button will display additional content. When the content is visible, the\n * arrow or triangle typically points down.\n *\n * If you have a group of disclosures that stack vertically and exist within the\n * same logical context, you may want to use @reach/accordion instead.\n *\n * @see Docs     https://reach.tech/disclosure\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/disclosure\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\n */\n\nimport * as React from \"react\";\nimport {\n\tcreateContext,\n\tmakeId,\n\tuseComposedRefs,\n\tcomposeEventHandlers,\n\tuseControlledState,\n} from \"@reach/utils\";\nimport type * as Polymorphic from \"@reach/polymorphic\";\nimport { useId } from \"@reach/auto-id\";\n\nconst [DisclosureProvider, useDisclosureCtx] =\n\tcreateContext<DisclosureContextValue>(\"Disclosure\");\n\n////////////////////////////////////////////////////////////////////////////////\n\nenum DisclosureStates {\n\tOpen = \"open\",\n\tCollapsed = \"collapsed\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Disclosure\n *\n * The wrapper component and context provider for a disclosure's button and\n * panel components. A disclosure should only have one button and one panel\n * descendant.\n *\n * @see Docs https://reach.tech/disclosure#disclosure-1\n *\n * @param props\n */\nconst Disclosure: React.FC<DisclosureProps> = ({\n\tchildren,\n\tdefaultOpen = false,\n\tonChange,\n\topen: openProp,\n\t...props\n}) => {\n\tlet id = useId(props.id ?? \"disclosure\");\n\tlet panelId = makeId(\"panel\", id);\n\n\tlet [open, setOpen] = useControlledState({\n\t\tcontrolledValue: openProp,\n\t\tdefaultValue: defaultOpen,\n\t\tcalledFrom: \"Disclosure\",\n\t});\n\n\tfunction onSelect() {\n\t\tonChange?.();\n\t\tsetOpen((open) => !open);\n\t}\n\n\treturn (\n\t\t<DisclosureProvider\n\t\t\tdisclosureId={id}\n\t\t\tonSelect={onSelect}\n\t\t\topen={open}\n\t\t\tpanelId={panelId}\n\t\t>\n\t\t\t{children}\n\t\t</DisclosureProvider>\n\t);\n};\n\ninterface DisclosureProps {\n\t/**\n\t * `Disclosure` expects to receive accept `DisclosureButton` and\n\t * `DisclosurePanel` components as children. It can also accept wrapper\n\t * elements if desired, though it is not recommended to pass other arbitrary\n\t * components within a disclosure in most cases.\n\t *\n\t * @see Docs https://reach.tech/disclosure#disclosure-children\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * Whether or not an uncontrolled disclosure component should default to its\n\t * `open` state on the initial render.\n\t *\n\t * @see Docs https://reach.tech/disclosure#disclosure-defaultopen\n\t */\n\tdefaultOpen?: boolean;\n\t/**\n\t * An id used to assign aria and id attributes to nested `DisclosureButton`\n\t * and `DisclosurePanel` components.\n\t *\n\t * Since the Disclosure component itself does not render a DOM element, an\n\t * `id` prop will not appear in the DOM directly as may be expected. Rather,\n\t * we need to generate IDs for the panel and button based on a disclosure ID\n\t * for aria compliance. If no `id` is passed we will generate descendant IDs\n\t * for you.\n\t *\n\t * @see Docs https://reach.tech/disclosure#disclosure-id\n\t */\n\tid?: React.ReactText;\n\t/**\n\t * The callback that is fired when a disclosure's open state is changed.\n\t *\n\t * @see Docs https://reach.tech/disclosure#disclosure-onchange\n\t */\n\tonChange?(): void;\n\t/**\n\t * The controlled open state of the disclosure. The `open` prop should be used\n\t * along with `onChange` to create controlled disclosure components.\n\t *\n\t * @see Docs https://reach.tech/disclosure#disclosure-open\n\t */\n\topen?: boolean;\n}\n\nDisclosure.displayName = \"Disclosure\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DisclosureButton\n *\n * The trigger button a user clicks to interact with a disclosure.\n *\n * @see Docs https://reach.tech/disclosure#disclosurebutton\n */\nconst DisclosureButton = React.forwardRef(function DisclosureButton(\n\t{\n\t\t// The element that shows and hides the content has role `button`.\n\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\n\t\tas: Comp = \"button\",\n\t\tchildren,\n\t\tonClick,\n\t\tonMouseDown,\n\t\tonPointerDown,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tconst { onSelect, open, panelId } = useDisclosureCtx(\"DisclosureButton\");\n\tconst ownRef = React.useRef<HTMLElement | null>(null);\n\n\tconst ref = useComposedRefs(forwardedRef, ownRef);\n\n\tfunction handleClick(event: React.MouseEvent) {\n\t\tevent.preventDefault();\n\t\townRef.current && ownRef.current.focus();\n\t\tonSelect();\n\t}\n\n\treturn (\n\t\t<Comp\n\t\t\t// Optionally, the element with role `button` has a value specified for\n\t\t\t// `aria-controls` that refers to the element that contains all the\n\t\t\t// content that is shown or hidden.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\n\t\t\taria-controls={panelId}\n\t\t\t// When the content is visible, the element with role `button` has\n\t\t\t// `aria-expanded` set to `true`. When the content area is hidden, it is\n\t\t\t// set to `false`.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\n\t\t\taria-expanded={open}\n\t\t\t{...props}\n\t\t\tdata-reach-disclosure-button=\"\"\n\t\t\tdata-state={open ? DisclosureStates.Open : DisclosureStates.Collapsed}\n\t\t\tref={ref}\n\t\t\tonClick={composeEventHandlers(onClick, handleClick)}\n\t\t>\n\t\t\t{children}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"button\", DisclosureButtonProps>;\n\n/**\n * @see Docs https://reach.tech/disclosure#disclosurebutton-props\n */\ninterface DisclosureButtonProps {\n\t/**\n\t * Typically a text string that serves as a label for the disclosure button,\n\t * though nested DOM nodes can be passed as well so long as they are valid\n\t * children of interactive elements.\n\t *\n\t * @see https://adrianroselli.com/2016/12/be-wary-of-nesting-roles.html\n\t * @see Docs https://reach.tech/disclosure#disclosurebutton-children\n\t */\n\tchildren: React.ReactNode;\n}\n\nDisclosureButton.displayName = \"DisclosureButton\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DisclosurePanel\n *\n * The collapsible panel in which inner content for an disclosure item is\n * rendered.\n *\n * @see Docs https://reach.tech/disclosure#disclosurepanel\n */\nconst DisclosurePanel = React.forwardRef(function DisclosurePanel(\n\t{ as: Comp = \"div\", children, ...props },\n\tforwardedRef\n) {\n\tconst { panelId, open } = useDisclosureCtx(\"DisclosurePanel\");\n\n\treturn (\n\t\t<Comp\n\t\t\tref={forwardedRef}\n\t\t\thidden={!open}\n\t\t\t{...props}\n\t\t\tdata-reach-disclosure-panel=\"\"\n\t\t\tdata-state={open ? DisclosureStates.Open : DisclosureStates.Collapsed}\n\t\t\tid={panelId}\n\t\t>\n\t\t\t{children}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", DisclosurePanelProps>;\n\nDisclosurePanel.displayName = \"DisclosurePanel\";\n\n/**\n * @see Docs https://reach.tech/disclosure#disclosurepanel-props\n */\ninterface DisclosurePanelProps {\n\t/**\n\t * Inner collapsible content for the disclosure item.\n\t *\n\t * @see Docs https://reach.tech/disclosure#disclosurepanel-children\n\t */\n\tchildren: React.ReactNode;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Disclosure` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/disclosure#usedisclosurecontext\n */\nfunction useDisclosureContext() {\n\tlet { open, panelId, disclosureId } = useDisclosureCtx(\n\t\t\"useDisclosureContext\"\n\t);\n\treturn React.useMemo(\n\t\t() => ({\n\t\t\tid: disclosureId,\n\t\t\tpanelId,\n\t\t\topen,\n\t\t}),\n\t\t[disclosureId, open, panelId]\n\t);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ninterface DisclosureContextValue {\n\tdisclosureId: string | number;\n\tonSelect(): void;\n\topen: boolean;\n\tpanelId: string;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { DisclosureButtonProps, DisclosurePanelProps, DisclosureProps };\nexport {\n\tDisclosure,\n\tDisclosureButton,\n\tDisclosurePanel,\n\tDisclosureStates,\n\tuseDisclosureContext,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,YAAuB;AACvB,mBAMO;AAEP,qBAAsB;AAEtB,IAAM,CAAC,oBAAoB,oBAC1B,gCAAsC,YAAY;AAInD,IAAK,mBAAL,kBAAK,sBAAL;AACC,8BAAO;AACP,mCAAY;AAFR;AAAA;AAkBL,IAAM,aAAwC,CAAC,OAMzC;AANyC,eAC9C;AAAA;AAAA,IACA,cAAc;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MAJwC,IAK3C,kBAL2C,IAK3C;AAAA,IAJH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAvDD;AA0DC,MAAI,KAAK,0BAAM,aAAM,OAAN,aAAY,YAAY;AACvC,MAAI,UAAU,yBAAO,SAAS,EAAE;AAEhC,MAAI,CAAC,MAAM,WAAW,qCAAmB;AAAA,IACxC,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd,YAAY;AAAA,EACb,CAAC;AAED,sBAAoB;AACnB;AACA,YAAQ,CAAC,UAAS,CAAC,KAAI;AAAA,EACxB;AAEA,SACC,oCAAC;AAAA,IACA,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,KAEC,QACF;AAEF;AA+CA,WAAW,cAAc;AAWzB,IAAM,mBAAmB,AAAM,iBAAW,2BACzC,IAUA,cACC;AAXD,eAGC;AAAA,QAAI,OAAO;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MAPD,IAQI,kBARJ,IAQI;AAAA,IALH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAKD,QAAM,EAAE,UAAU,MAAM,YAAY,iBAAiB,kBAAkB;AACvE,QAAM,SAAS,AAAM,aAA2B,IAAI;AAEpD,QAAM,MAAM,kCAAgB,cAAc,MAAM;AAEhD,uBAAqB,OAAyB;AAC7C,UAAM,eAAe;AACrB,WAAO,WAAW,OAAO,QAAQ,MAAM;AACvC,aAAS;AAAA,EACV;AAEA,SACC,oCAAC;AAAA,IAKA,iBAAe;AAAA,IAKf,iBAAe;AAAA,KACX,QAXJ;AAAA,IAYA,gCAA6B;AAAA,IAC7B,cAAY,OAAO,oBAAwB;AAAA,IAC3C;AAAA,IACA,SAAS,uCAAqB,SAAS,WAAW;AAAA,MAEjD,QACF;AAEF,CAAC;AAiBD,iBAAiB,cAAc;AAY/B,IAAM,kBAAkB,AAAM,iBAAW,0BACxC,IACA,cACC;AAFD,eAAE,MAAI,OAAO,OAAO,aAApB,IAAiC,kBAAjC,IAAiC,CAA/B,MAAkB;AAGpB,QAAM,EAAE,SAAS,SAAS,iBAAiB,iBAAiB;AAE5D,SACC,oCAAC;AAAA,IACA,KAAK;AAAA,IACL,QAAQ,CAAC;AAAA,KACL,QAHJ;AAAA,IAIA,+BAA4B;AAAA,IAC5B,cAAY,OAAO,oBAAwB;AAAA,IAC3C,IAAI;AAAA,MAEH,QACF;AAEF,CAAC;AAED,gBAAgB,cAAc;AAsB9B,gCAAgC;AAC/B,MAAI,EAAE,MAAM,SAAS,iBAAiB,iBACrC,sBACD;AACA,SAAO,AAAM,cACZ,MAAO;AAAA,IACN,IAAI;AAAA,IACJ;AAAA,IACA;AAAA,EACD,IACA,CAAC,cAAc,MAAM,OAAO,CAC7B;AACD;","names":[]}